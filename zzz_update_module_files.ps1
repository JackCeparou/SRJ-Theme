######################################################################################################################
$OutFileName = '.files'
######################################################################################################################
function SearchAndWriteOutFile {
    param( [string]$outFile, [string]$searchPattern, [string]$fileFullName)

    # Write-Host "  -Pattern: $searchPattern"
    $possibleFiles = Get-ChildItem $searchPattern -Recurse -Exclude '.\Plugins'
    $possibleFilesCount = ($possibleFiles | Measure-Object).Count
    if ($possibleFilesCount -eq 1) {
        # Write-Host (("  Found 1 file: $fileFullName") -replace 'Get-Location',"\.")
        $possibleFileRelativePath = "$($possibleFiles[0].FullName.Replace((Get-Location),"."))"
        Add-Content $outFile -Value $possibleFileRelativePath
    }
    elseif ($possibleFilesCount -gt 1) {
        # Write-Host "-File: $fileFullName"
        Write-Host "  Found multiples files ($possibleFilesCount):"
        $idx = 0
        foreach($possibleFile in $possibleFiles) {
            $possibleFileRelativePath = $possibleFile.Name
            $possibleFileFullName = $possibleFile.FullName
            Write-Host "  * $possibleFileFullName"
            if ($idx -eq 0) {
                Add-Content $outFile -Value "$possibleFileRelativePath"
            }
            else {
                Add-Content $outFile -Value "# $possibleFileRelativePath"
            }
            $idx = $idx + 1
        }
    }
    else { # none
        $targetFileRelativePath = $fileFullName.Replace((Get-Location),".")
        Write-Host "/!\ No file found for $targetFileRelativePath for pattern $searchPattern"
        Add-Content $outFile -Value "### Not Found ### $targetFileRelativePath for pattern $searchPattern"

        #TODO: add some check and update to .gitignore
    }

    return $possibleFilesCount
}

function BuildFiles {
    param( [string]$basePath, [string]$searchPath)

    $folders = Get-ChildItem ".\Plugins\$basePath" -Directory -Recurse
    if (($folders | Measure-Object).Count -eq 0) {
        $folders = Get-ChildItem ".\Plugins" -Directory -Recurse -Filter $basePath
    }
    foreach ($folder in $folders) {
        $folderFullName = $folder.FullName
        $outFile = Join-Path $folderFullName $OutFileName

        # Write-Host "Folder: $folderFullName"
        $files = Get-ChildItem $folderFullName -Exclude $OutFileName | Where-Object { ! $_.PSIsContainer }
        if (($files | Measure-Object).Count -gt 0){
            Set-Content $outFile -Value '##################################################################'
            Add-Content $outFile -Value '### this file was generated by a tool, modify at your own risk ###'
            Add-Content $outFile -Value '##################################################################'
        }

        foreach($file in $files) {
            $fileName = $file.Name
            $fileFullName = $file.FullName
            # Write-Host "-File: $fileFullName"

            $searchPattern = "$searchPath\**\$fileName" -replace 'Get-Location',"\."

            $count = SearchAndWriteOutFile $outFile $searchPattern $fileFullName
            # if ($count -eq 0) {
            #     $count = SearchAndWriteOutFile $outFile "$($searchPattern)_" $fileFullName
            # }
        }
    }
}
########### ##########################################################################################################
### Run ###
###########
BuildFiles 'Resu' 'Resu'
BuildFiles 'Jack' 'JackCeparouCompass'
######################################################################################################################
